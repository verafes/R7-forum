Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?

When enabling CRUD operations on a table in a Rails application, we need a model, a controller, views, and routes.
Using a scaffold automatically creates these components for us.


2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?

We include the actions (GET, POST, PUT, PATCH or DELETE), the path we're using, and the controller action it connects to.
Also to the path, we can add a variable that describes the route in the path by adding a colon before it,
like :id, which lets us handle specific items, like a particular user, in our views and controllers.

3. What does the Rails db:migrate command do?

The db:migrate command applies changes to the database schema based on the migration files.
It updates the database to match the current state defined in these migration files.


4. What file do you look at to see the current database schema?

We look at the db/schema.rb file.

5. What command shows the routes?

rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?

To start the Rails console, we use the command:
bin/rails console

From the console, we can perform CRUD operations. For example:
create: User.create(name: "John", skill_level: "beginner")
read all: User.all or read specific user: User.where(name: "John")
update: user.update(name: "Mary")
delete: User.find(1).destroy

7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?

ERB files have Ruby code inside HTML. There are two types:
Output: <%= %> inserts Ruby code for displaying Ruby code results in the HTML.
Embedded: <% %> runs Ruby code without inserting it.
These statements are processed on the server and turn into HTML for the browser.

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?

Forum is capitalized because it's a class name.
@forum is lowercase because it's an instance variable,
@ symbol indicates it's an instance variable used within a class.

9. Consider these statements:

@forum = Forum.new(...)
@forum =Forum.create(...)
@forum.save(...)

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?

@forum = Forum.new(...) initializes a new instance of the Forum class but does not save it to the database.
@forum =Forum.create(...) initializes a new instance of the Forum class and immediately saves it to the database.
@forum.save(...) is incorrect because save is a method called on an instance of a class, not on the class itself.
Instead, we use @forum.save after creating an instance with Forum.new(...) to save it to the database.

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?

The show action in the forums controller renders the show view by default.
It knows which forum to show because params[:id] contains the forum's ID from the URL.
The routing system sets params[:id] based on the URL pattern, like forums/1, where 1 is the id.
We can use @forum = Forum.find(params[:id]) to fetch the specific forum in the show method.
